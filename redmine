#!/usr/bin/env php
<?php

require __DIR__.'/vendor/autoload.php';

/**
 * Commands.
 */
function listIssues()
{
    $limit = getenv('REDMINE_ISSUES_LIMIT');
    if (!is_numeric($limit)) {
      $limit = 15;
    }
    $response = client()->issue->all([
        'assigned_to_id' => 'me',
        'limit' => $limit,
    ]);

    $issues = collect($response['issues'])
        ->sortBy('project');


    echo "\n"
        .blank('Issue', 10)
        .blank('Project', 18)
        .blank('Status', 15)
        .blank('Priority', 10)
        .blank('Author', 24)
        .blank('Assigned To', 22)
        .blank('Created At', 12)
        .substr('Subject', 0, 100);

    echo "\n" . str_repeat('=', 211);

    $issues->map(function ($issue) {
        echo "\n"
            .blank($issue['id'], 10)
            .blank($issue['project']['name'], 18)
            .blank($issue['status']['name'], 15)
            .blank($issue['priority']['name'], 10)
            .blank($issue['author']['name'], 24)
            .blank($issue['assigned_to']['name'], 22)
            .blank(substr($issue['created_on'], 0, 10), 12)
            .substr($issue['subject'], 0, 100);
    });
}

function show($issue)
{
    $response = client()->issue->show($issue);
    echo "\n"
    .'   Issue: '.$issue
    ."\n".' Project: '.$response['issue']['project']['name']
    ."\n".' Tracker: '.$response['issue']['tracker']['name']
    ."\n".'  Status: '.$response['issue']['status']['name']
    ."\n".'Priority: '.$response['issue']['priority']['name']
    ."\n".'  Author: '.$response['issue']['author']['name'] . '(' . $response['issue']['author']['id'] . ')'
    ."\n".'Assigned: '.$response['issue']['assigned_to']['name'] . '(' . $response['issue']['assigned_to']['id'] . ')'
    ."\n".'    Date: '.(new Carbon\Carbon($response['issue']['created_on']))->format('d/m/Y')
    ."\n".'    Time: '.(new Carbon\Carbon($response['issue']['created_on']))->format('H:i:s')
    ."\n".' Subject: '.$response['issue']['subject']
    ."\n"
    ."\n".' '.$response['issue']['description']
    ."\n";
}

function resolve($issue, $comment = '')
{
    $response = client()->issue->show($issue);
    $user = $response['issue']['author']['id'];

    $data = [
        'assigned_to_id' => $user,
        'status_id'      => 3
    ];

    if (!empty($comment)) {
        $data['notes'] = $comment;
    }

    client()->issue->update($issue, $data);

    return show($issue);
}

function doing($issue)
{
    $currentUserId = client()->user->getCurrentUser()['user']['id'];

    $data = [
        'assigned_to_id' => $currentUserId,
        'status_id'      => 2
    ];

    if (!empty($comment)) {
        $data['notes'] = $comment;
    }

    client()->issue->update($issue, $data);

    return show($issue);
}

function close($issue)
{
    $data = [
        'status_id' => 5
    ];

    if (!empty($comment)) {
        $data['notes'] = $comment;
    }

    client()->issue->update($issue, $data);

    return show($issue);
}

function open($issue)
{
    $command = 'x-www-browser '.getenv('REDMINE_HOST').'/issues/'.$issue;
    shell_exec($command);
}

function help()
{
    echo <<<HELP

    REDMINE COMMAND LINE TOOL

    usage:
        redmine <command>

    enviorment:
        REDMINE_ISSUES_LIMIT Ensure limit of issues printed (default: 15)
        REDMINE_USERNAME     Username for login
        REDMINE_PASSWORD     Password for login
        REDMINE_HOST         Host of redmine server

    commands:
        help                Print this help message
        list                Print list of issues
        show <issue>        Show information about a issue
        open <issue>        Open the issue in default browser

HELP;
    echo "\n";
}

/**
 * Help functions.
 */
function client()
{
    return new Redmine\Client(getenv('REDMINE_HOST'), getenv('REDMINE_USERNAME'), getenv('REDMINE_PASSWORD'));
}

function blank($text, $number)
{
    return $text.str_repeat(' ', ($number - strlen($text)));
}

function arg($arg)
{
    global $argv;

    if (is_int($arg)) {
        return $argv[$arg];
    }

    if (!in_array($arg, $argv)) {
        return null;
    }

    $index = array_search($arg, $argv);
    if (array_key_exists($index + 1, $argv)) {
        return $argv[$index + 1];
    }

    return true;
}

/*
 * Handler
 */

if ($argc == 1 || in_array('list', $argv) || in_array('issues', $argv)) {
    return listIssues();
}

if ($argc == 2 && is_numeric(arg(1))) {
    return show(arg(1));
}

if ($issue = arg('show')) {
    return show($issue);
}

if ($issue = arg('open')) {
    return open($issue);
}

if (in_array('resolve', $argv)) {
    $issue = arg(2);
    $comment = '';
    if ($argc == 4) {
        $comment = arg(3);
    }
    return resolve($issue, $comment);
}


if (in_array('doing', $argv)) {
    $issue = arg(2);
    return doing($issue);
}

if (in_array('close', $argv)) {
    $issue = arg(2);
    $comment = '';
    if ($argc == 4) {
        $comment = arg(3);
    }
    return close($issue, $comment);
}

if (in_array('--help', $argv) || in_array('-h', $argv) || in_array('help', $argv)) {
    return help();
}

echo "Error: command not found or was passsed invalid params, see 'help' for more info. \n";
exit(1);
